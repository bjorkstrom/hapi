swagger: "2.0"

info:
  title: "{{title}}"
  version: "1.0.0"

basePath: /v1

paths:
  /models/new:
    post:
      summary: upload new model
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: model
        in: formData
        description: model description and optional position
        type: string
      - name: modelFile
        in: formData
        description: the model's binary geometry
        required: true
        type: file
      responses:
        201:
          description: Created model's ID
          schema:
            type: object
            properties:
              model:
                type: string
        400:
          description: Error parsing request body
          schema:
            $ref: "#/definitions/ErrorResponse"
  /models:
    get:
      summary: get all uploaded model's IDs
      produces:
      - application/json
      responses:
        200:
          description: devices
          schema:
            $ref: "#/definitions/Models"
  /models/{modelId}:
    put:
      summary: Update model
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: modelId
          in: path
          description: ID of the model to update
          required: true
          type: string
        - name: modelUpdate
          in: body
          description: Model update description
          required: true
          schema:
            $ref: "#/definitions/ModelUpdate"
      responses:
        204:
          description: Model updated
        404:
          description: Model not found
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      summary: get model's metadata and import status
      produces:
        - application/json
      parameters:
        - name: modelId
          in: path
          description: ID of the model
          required: true
          type: string
      responses:
        200:
          description: model's description and status
          schema:
            $ref: "#/definitions/ModelStatus"
        404:
          description: Model not found
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      summary: delete model
      parameters:
        - name: modelId
          in: path
          description: ID of the model to delete
          required: true
          type: string
      responses:
        204:
          description: model deleted
        400:
          description: model is instanciated, can't delete
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: model not found
          schema:
            $ref: "#/definitions/ErrorResponse"
  /devices:
    get:
      summary: get all devices
      produces:
        - application/json
      responses:
        200:
          description: devices
          schema:
            $ref: "#/definitions/Devices"
  /device/{serialNo}/models:
    post:
      summary: set active model instances on the device
      consumes:
        - application/json
      parameters:
        - name: serialNo
          in: path
          description: device's serial number
          required: true
          type: string
        - in: body
          name: modelInstances
          description: model instances to create
          required: true
          schema:
            $ref: "#/definitions/ModelInstances"
      responses:
        204:
          description: model instances successfully created
        404:
          description: device or model not found
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      summary: get active model instances on the device
      produces:
        - application/json
      parameters:
        - name: serialNo
          in: path
          description: device's serial number
          required: true
          type: string
      responses:
        200:
          description: current model instances on the device
          schema:
            $ref: "#/definitions/ModelInstances"
        404:
          description: device or model not found
          schema:
            $ref: "#/definitions/ErrorResponse"
  /device/{serialNo}/events-subscriptions/new:
    post:
      summary: create new events subscription
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: serialNo
          in: path
          description: device's serial number
          required: true
          type: string
        - name: Subscription
          in: body
          description: Model update description
          required: true
          schema:
            $ref: "#/definitions/EventSubscription"
      responses:
        200:
          description: created event subscription information
          schema:
            $ref: "#/definitions/CreatedEventSubscription"
  /device/{serialNo}/events-subscriptions/{subscriptionID}:
    post:
      summary: renew subscription
      consumes:
        - application/json
      parameters:
        - name: serialNo
          in: path
          description: device's serial number
          required: true
          type: string
        - name: subscriptionID
          in: path
          description: event subscription's ID
          required: true
          type: string
        - name: subscription
          in: body
          description: Model update description
          required: true
          schema:
            type: object
            properties:
              duration:
                type: number
      responses:
        204:
          description: duration updated
    delete:
      summary: cancel event subscription
      parameters:
        - name: serialNo
          in: path
          description: device's serial number
          required: true
          type: string
        - name: subscriptionID
          in: path
          description: event subscription's ID
          required: true
          type: string
      responses:
        204:
          description: subscription canceled


definitions:
  CreatedEventSubscription:
    type: object
    properties:
      subscriptionID:
        type: string
  EventSubscription:
    type: object
    properties:
      duration:
        type: number
      eventFilters:
        type: array
        items:
          $ref: "#/definitions/EventFilter"
      destination:
        type: object
        properties:
          restEndpoint:
            $ref: "#/definitions/RestEndpoint"
  EventFilter:
    type: object
    properties:
      topic:
        type: string
  RestEndpoint:
    type: object
    properties:
      URL:
        type: string
      method:
        type: string
        enum: [POST]
      headers:
        type: array
        items:
          type: object
          required:
            - name
            - value
          properties:
            name:
              type: string
            value:
              type: string
  Models:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: "#/definitions/Model"
  Model:
    type: object
    properties:
      model:
        type: string
    required: [model]
  Devices:
    type: object
    properties:
      devices:
        type: array
        items:
          $ref: "#/definitions/Device"
  Device:
    type: object
    properties:
      serialNo:
        type: string
    required: [serialNo]
  ModelInstances:
    type: object
    properties:
      modelInstances:
        type: array
        items:
          $ref: "#/definitions/ModelInstance"
  ModelInstance:
    type: object
    properties:
      model:
        type: string
      name:
        type: string
      description:
        type: string
      hidden:
        type: boolean
      position:
        $ref: "#/definitions/Position"
    required: [model]
  ModelUpdate:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      defaultPosition:
        $ref: "#/definitions/Position"
  ModelStatus:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      importStatus:
        type: string
        enum: [processing, done, failed]
      defaultPosition:
        $ref: "#/definitions/Position"
  Position:
    type: object
    properties:
      sweref99:
        type: object
        properties:
          projection:
            type: string
            enum:
            - TM
            - 12 00
            - 13 30
            - 15 00
            - 16 30
            - 18 00
            - 14 15
            - 15 45
            - 17 15
            - 18 45
            - 20 15
            - 21 45
            - 23 15
          x:
            type: number
          y:
            type: number
          z:
            type: number
          roll:
            type: number
          pitch:
            type: number
          yaw:
            type: number
  ErrorResponse:
    type: object
    properties:
      message:
        type: string
